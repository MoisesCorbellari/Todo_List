name: FastAPI CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Use um secret DATABASE_URL no repositório para produção/CI.
      # Se não existir, cai no Postgres do serviço acima:
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql+psycopg://testuser:testpass@localhost:5432/testdb' }}
      SQLALCHEMY_DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql+psycopg://testuser:testpass@localhost:5432/testdb' }}
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov ruff mypy psycopg
          # cliente psql p/ pg_isready (às vezes já vem; isso garante)
          sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Esperar Postgres ficar saudável
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U testuser -d testdb && break
            sleep 2
          done

      - name: Rodar migrações (Alembic) — opcional
        if: hashFiles('alembic.ini') != ''
        run: alembic upgrade head

      - name: Ruff (lint)
        run: ruff check . --output-format=github

      - name: mypy (tipagem)
        run: mypy . || true  # remova "|| true" se quiser falhar o job

      - name: Testes (pytest + cobertura)
        run: pytest -q --maxfail=1 --disable-warnings --cov=./ --cov-report=xml

      - name: Publicar cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
